# Generated by Django 2.2.4 on 2022-01-11 06:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=255, verbose_name='Bot Name')),
                ('active', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title Category')),
                ('index', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskID', models.CharField(blank=True, max_length=255, null=True, verbose_name='TaskID')),
                ('status', models.IntegerField(blank=True, choices=[(0, 'PENDING'), (1, 'INPROCESS'), (2, 'RETRY'), (3, 'FAILURE'), (4, 'SUCCESS')], default=None, null=True, verbose_name='Status')),
                ('logFile', models.CharField(blank=True, max_length=50, null=True, verbose_name='Log File')),
                ('customatch', models.BooleanField(default=False, verbose_name='Is Custom Match')),
                ('mapinfo', models.TextField(null=True, verbose_name='Map Info Init')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('User', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Match_bot', to=settings.AUTH_USER_MODEL)),
                ('bot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Match_bot', to='backend.Bot')),
                ('group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Match_bot', to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField(default='')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, default=None, upload_to='', verbose_name='Avatar Url')),
                ('phoneNumber', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone number')),
                ('graduation', models.CharField(blank=True, max_length=4, null=True, verbose_name='Graduation')),
                ('university', models.CharField(blank=True, max_length=100, null=True, verbose_name='University')),
                ('botLog', models.IntegerField(choices=[(0, 'Turn off'), (1, 'Turn On')], default=0, verbose_name='Bot Logs')),
                ('isJoin', models.BooleanField(default=False, verbose_name='Is Join')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Round Name')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Round_User', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=255, verbose_name='Key')),
                ('value', models.TextField(verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='WinRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('win_rate', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('allMatch', models.IntegerField(default=0)),
                ('winMatch', models.IntegerField(default=0)),
                ('botID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='BotID', to='backend.Bot')),
            ],
        ),
        migrations.CreateModel(
            name='Round_Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupid', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Round_Group', to='auth.Group')),
                ('roundid', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Round_Group', to='backend.Round')),
            ],
        ),
        migrations.CreateModel(
            name='Rival',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('bot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Rival_Bot', to='backend.Bot')),
                ('match', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Rival_Match', to='backend.Match')),
            ],
        ),
        migrations.CreateModel(
            name='RecordNotify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='RecordNotify_Notify', to='backend.Notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='RecordNotify_User', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top', models.IntegerField(default=None, null=True, verbose_name='Positions')),
                ('score', models.IntegerField(default=None, null=True, verbose_name='Score')),
                ('kills', models.IntegerField(default=0, null=True, verbose_name='Kills')),
                ('damge', models.IntegerField(default=0, null=True, verbose_name='Danage')),
                ('owner', models.BooleanField(default=False, verbose_name='Owner Match')),
                ('bot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Rank_Bot', to='backend.Bot')),
                ('match', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Rank_Match', to='backend.Match')),
            ],
        ),
        migrations.CreateModel(
            name='Predict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voteNumber', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predict', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='backend.Player')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='round',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='Match_bot', to='backend.Round'),
        ),
        migrations.CreateModel(
            name='Live',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('livetime', models.DateTimeField(verbose_name='Live Start')),
                ('state', models.IntegerField(choices=[(0, 'PENDING'), (1, 'READY'), (2, 'DONE')], default=0)),
                ('match', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='live', to='backend.Match')),
            ],
        ),
        migrations.CreateModel(
            name='Compile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('language', models.CharField(choices=[('cpp', 'C++'), ('java', 'Java')], default='cpp', max_length=5, verbose_name='Language')),
                ('taskID', models.CharField(blank=True, default=None, editable=False, max_length=126, null=True, verbose_name='TaskID')),
                ('state', models.IntegerField(blank=True, choices=[(0, 'Compile successfully'), (1, 'Compile Failed'), (2, 'Is Compiling')], default=None, null=True, verbose_name='State')),
                ('localFile', models.CharField(blank=True, default=None, max_length=256, null=True, verbose_name='File Path')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Compile_User', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='bot',
            name='compile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Bot_Compile', to='backend.Compile'),
        ),
        migrations.AddField(
            model_name='bot',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Bot_User', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title Article')),
                ('index', models.IntegerField(default=0)),
                ('content', tinymce.models.HTMLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='article', to='backend.Category')),
            ],
        ),
    ]
