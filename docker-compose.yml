version: '3'  
services:  
    python:
        build: 
            context: .
            dockerfile: Dockerfile
        image: webservice

    nginx:
        image: nginx:latest
        container_name: AI_nginx
        ports:
            - '80:8000'
            - '8080:8080'
            - '8888:8888'
        volumes:
            - ./:/webservice
            - ./ConfigForNginx:/etc/nginx/conf.d
            - ./mime.types:/etc/nginx/mime.types:ro
        depends_on:
            - gunicorn
            - daphne

    gunicorn: 
        image: webservice
        container_name: AI_gunicorn
        volumes:
            - ./:/webservice
        # restart: on-failure
        command: bash -c "python manage.py collectstatic --no-input && 
                                            python manage.py migrate && gunicorn webserivce.wsgi:application -b 0.0.0.0:8000 --reload --access-logfile - --error-logfile - --log-level warning"
        depends_on:
            - redis
            - database

    daphne:
        image: webservice
        container_name: AI_daphne
        volumes:
            - ./:/webservice
        environment:
            - REDIS_PORT_6379_TCP_ADDR=redis
        # restart: on-failure
        command: bash -c "daphne webserivce.asgi:application --port 8888 -v2 -b 0.0.0.0 --access-log -"
        depends_on:
            - redis
            - database

    celery:
        image: webservice
        container_name: AI_celery
        volumes:
            - ./:/webservice
        environment:
            - REDIS_PORT_6379_TCP_ADDR=redis
        # restart: on-failure
        command: bash -c "celery -A webserivce worker --loglevel=info --concurrency=4"
        depends_on:
            - redis
            - database

    flower:
        image: webservice
        container_name: AI_flower
        volumes:
            - ./:/webservice
        environment:
            - REDIS_PORT_6379_TCP_ADDR=redis
        # restart: on-failure
        command: bash -c "flower -A webserivce --port=5555"
        depends_on:
            - redis

    redis:
        image: redis:latest
        container_name: AI_redis
        restart: on-failure

    database:
        image: postgres:latest
        container_name: AI_database
        restart: on-failure
        volumes:
            - postgres_data:/var/lib/postgresql/data/

    # backup:
    #     image: docker-volume-backup:latest
    #     environment:
    #         - BACKUP_CRON_EXPRESSION=30 17 * * 5
    #     volumes:
    #         - postgres_data:/backup/postgres_data:ro 
    #         - ./backups:/archive                     
volumes:
    postgres_data: